import 'tables.drift';
import '../converters.dart';

_getNodes:
    SELECT * FROM nodes;

_getEdges:
    SELECT * FROM edges;

_deleteAllNodes:
    DELETE FROM nodes;

_deleteAllEdges:
    DELETE FROM edges;

_deleteEdge:
    DELETE FROM edges
    WHERE source = :source
    AND target = :target;

_deleteNode:
    DELETE FROM nodes
    WHERE id = :id;

_deleteEdgesForNode:
    DELETE FROM edges
    WHERE source = :id
    AND target = :id;

_insertEdge:
    INSERT OR REPLACE INTO edges (
        source,
        target,
        properties
    ) VALUES (
        :source,
        :target,
        :properties
    )
    RETURNING *;

_insertNode:
    INSERT OR REPLACE INTO nodes (
        body
    ) VALUES (
        :body
    )
    RETURNING *;

_updateNode:
    UPDATE nodes
    SET body = :body
    WHERE id = :id;

getNodeById:
    SELECT * FROM nodes
    WHERE id = :id;

selectEdgesInbound:
    SELECT * FROM edges
    WHERE source = :source;

selectEdgesOutbound:
    SELECT * FROM edges
    WHERE target = :source;

searchEdges:
    SELECT * FROM edges
    WHERE source = :source
    UNION SELECT * FROM edges
    WHERE target = :target;

traverseInbound(:source AS TEXT):
    WITH RECURSIVE traverse(id) AS (
        SELECT :source
        UNION
        SELECT source FROM edges JOIN traverse ON target = id
    ) SELECT CAST(id  AS TEXT) FROM traverse;

traverseOutbound(:source AS TEXT):
    WITH RECURSIVE traverse(id) AS (
        SELECT :source
        UNION
        SELECT target FROM edges JOIN traverse ON source = id
    ) SELECT CAST(id  AS TEXT) FROM traverse;

traverseBodiesInbound(:source AS TEXT):
    WITH RECURSIVE traverse(x, y, obj) AS (
        SELECT :source, '()', '{}'
        UNION
        SELECT id, '()', body FROM nodes JOIN traverse ON id = x
        UNION
        SELECT source, '<-', properties FROM edges JOIN traverse ON target = x
    ) SELECT x, y, obj MAPPED BY `const JsonMapConverter()` FROM traverse;

traverseBodiesOutbound(:source AS TEXT):
    WITH RECURSIVE traverse(x, y, obj) AS (
        SELECT :source, '()', '{}'
        UNION
        SELECT id, '()', body FROM nodes JOIN traverse ON id = x
        UNION
        SELECT target, '->', properties FROM edges JOIN traverse ON source = x
    ) SELECT x, y, obj MAPPED BY `const JsonMapConverter()` FROM traverse;

traverseBodies(:source AS TEXT):
    WITH RECURSIVE traverse(x, y, obj) AS (
        SELECT :source, '()', '{}'
        UNION
        SELECT id, '()', body FROM nodes JOIN traverse ON id = x
        UNION
        SELECT source, '<-', properties FROM edges JOIN traverse ON target = x
        UNION
        SELECT target, '->', properties FROM edges JOIN traverse ON source = x
    ) SELECT x, y, obj MAPPED BY `const JsonMapConverter()` FROM traverse;

traverse(:source AS TEXT):
    WITH RECURSIVE traverse(id) AS (
        SELECT :source
        UNION
        SELECT source FROM edges JOIN traverse ON target = id
        UNION
        SELECT target FROM edges JOIN traverse ON source = id
    ) SELECT id FROM traverse;
